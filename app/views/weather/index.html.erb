<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Forecast</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .weather-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            padding: 40px;
            max-width: 500px;
            width: 100%;
            text-align: center;
        }

        .title {
            font-size: 2.5rem;
            color: #333;
            margin-bottom: 10px;
            font-weight: 300;
        }

        .subtitle {
            color: #666;
            margin-bottom: 30px;
            font-size: 1.1rem;
        }

        .search-form {
            margin-bottom: 30px;
        }

        .input-group {
            margin-bottom: 20px;
        }

        .search-input {
            width: 100%;
            padding: 15px 20px;
            border: 2px solid #e1e8ed;
            border-radius: 50px;
            font-size: 1rem;
            outline: none;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .units-select {
            width: 100%;
            padding: 15px 20px;
            border: 2px solid #e1e8ed;
            border-radius: 50px;
            font-size: 1rem;
            outline: none;
            background: white;
            cursor: pointer;
        }

        .search-btn {
            width: 100%;
            padding: 15px 30px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 50px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .search-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .search-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }

        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .error {
            background: #ff6b6b;
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: center;
        }

        .weather-result {
            display: none;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-top: 20px;
        }

        .location {
            font-size: 1.5rem;
            margin-bottom: 10px;
            opacity: 0.9;
        }

        .temperature {
            font-size: 4rem;
            font-weight: 300;
            margin: 20px 0;
        }

        .description {
            font-size: 1.2rem;
            margin-bottom: 20px;
            text-transform: capitalize;
        }

        .weather-details {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-top: 20px;
        }

        .detail-item {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
            text-align: center;
        }

        .detail-label {
            font-size: 0.9rem;
            opacity: 0.8;
            margin-bottom: 5px;
        }

        .detail-value {
            font-size: 1.1rem;
            font-weight: 600;
        }

        .cache-indicator {
            background: #00b894;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9rem;
            margin: 10px 0;
            display: inline-block;
        }

        @media (max-width: 768px) {
            .weather-container {
                padding: 20px;
                margin: 10px;
            }

            .temperature {
                font-size: 3rem;
            }

            .weather-details {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="weather-container">
        <h1 class="title">üå§Ô∏è Weather Forecast</h1>
        <p class="subtitle">Get real-time weather information for any location</p>

        <form class="search-form" id="weatherForm">
            <div class="input-group">
                <input 
                    type="text" 
                    class="search-input" 
                    id="addressInput" 
                    placeholder="Enter city, state, or address (e.g., New York, NY)"
                    required
                >
            </div>
            
            <div class="input-group">
                <select class="units-select" id="unitsSelect">
                    <option value="metric">Celsius (¬∞C)</option>
                    <option value="imperial">Fahrenheit (¬∞F)</option>
                    <option value="kelvin">Kelvin (K)</option>
                </select>
            </div>
            
            <button type="submit" class="search-btn" id="searchBtn">
                Get Weather
            </button>
        </form>

        <div class="loading" id="loadingDiv" style="display: none;">
            <div class="spinner"></div>
            <p>Fetching weather data...</p>
        </div>

        <div class="error" id="errorDiv" style="display: none;"></div>

        <div class="weather-result" id="weatherResult">
            <div class="location" id="locationDiv"></div>
            <div class="temperature" id="temperatureDiv"></div>
            <div class="description" id="descriptionDiv"></div>
            
            <div class="cache-indicator" id="cacheIndicator" style="display: none;">
                üì¶ Data from cache (30-minute cache)
            </div>
            
            <div class="weather-details" id="weatherDetails">
                <!-- Weather details will be populated here -->
            </div>
        </div>
    </div>

    <script>
        document.getElementById('weatherForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const address = document.getElementById('addressInput').value.trim();
            const units = document.getElementById('unitsSelect').value;
            const searchBtn = document.getElementById('searchBtn');
            const loadingDiv = document.getElementById('loadingDiv');
            const errorDiv = document.getElementById('errorDiv');
            const weatherResult = document.getElementById('weatherResult');
            const cacheIndicator = document.getElementById('cacheIndicator');
            
            if (!address) {
                showError('Please enter an address');
                return;
            }
            
            // Show loading state
            searchBtn.disabled = true;
            searchBtn.textContent = 'Loading...';
            loadingDiv.style.display = 'block';
            errorDiv.style.display = 'none';
            weatherResult.style.display = 'none';
            cacheIndicator.style.display = 'none';
            
            try {
                const response = await fetch(`/weather/forecast?address=${encodeURIComponent(address)}&units=${units}`);
                const data = await response.json();
                
                if (data.success) {
                    displayWeather(data.data, data.meta);
                    if (data.meta.cached) {
                        cacheIndicator.style.display = 'block';
                    }
                } else {
                    showError(data.error || 'Failed to fetch weather data');
                }
            } catch (error) {
                showError('Network error: ' + error.message);
            } finally {
                searchBtn.disabled = false;
                searchBtn.textContent = 'Get Weather';
                loadingDiv.style.display = 'none';
            }
        });
        
        function showError(message) {
            const errorDiv = document.getElementById('errorDiv');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
        }
        
        function displayWeather(data, meta) {
            const weatherResult = document.getElementById('weatherResult');
            const locationDiv = document.getElementById('locationDiv');
            const temperatureDiv = document.getElementById('temperatureDiv');
            const descriptionDiv = document.getElementById('descriptionDiv');
            const weatherDetails = document.getElementById('weatherDetails');
            
            // Display current weather
            const current = data.current;
            const location = data.location;
            
            locationDiv.textContent = location.formatted_address || location.address;
            temperatureDiv.textContent = `${Math.round(current.temperature)}¬∞${getUnitSymbol(meta.units)}`;
            descriptionDiv.textContent = current.description;
            
            // Display weather details
            weatherDetails.innerHTML = `
                <div class="detail-item">
                    <div class="detail-label">Feels Like</div>
                    <div class="detail-value">${Math.round(current.feels_like)}¬∞${getUnitSymbol(meta.units)}</div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Humidity</div>
                    <div class="detail-value">${current.humidity}%</div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Wind Speed</div>
                    <div class="detail-value">${current.wind_speed} m/s</div>
                </div>
                <div class="detail-item">
                    <div class="detail-label">Pressure</div>
                    <div class="detail-value">${current.pressure} hPa</div>
                </div>
            `;
            
            weatherResult.style.display = 'block';
        }
        
        function getUnitSymbol(units) {
            switch(units) {
                case 'metric': return 'C';
                case 'imperial': return 'F';
                case 'kelvin': return 'K';
                default: return 'C';
            }
        }
    </script>
</body>
</html>
